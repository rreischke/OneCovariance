; This is the configuration file for the script covariance.py which starts the covariance calculation.
; In this example config file we give a detailed description of all the different parameters that can
; be changed in the code. 
; The ini file is organised such that there are data-blocks (or sections in config parser language) denoted 
; with [data_block] and parameters below this data block with name and value: So for example
;
; [data_block]
; parameter1 = 0.5
; parameter2 = "file.txt", "file2.txt"
;
; The code itself is documented with docstrings and example codes are given in every class docstring.
;
; We use 'config.ini' as the default name for the ini.file, but this can be changed.
; If you want to run the code with this file just run:
;
; python3 covariance.py
; 
; In case you have your own ini file just do:
;
; python3 covariance.py my_ini_file.ini
;
; If you create your own ini file remember that some parameters are optional while some are necessary.
; If a necessary parameter is omitted the program will give an error message.
; If an optional parameter is omitted the program will report the assumed value.
; If parameters are set which are not required, they will just be ignored.
;
;
; Covariance-terms section:
;
; Which covariance terms are supposed to be calculated. All parameters can assume values: True/False
;   gauss:       Should the Gaussian term be calculated (this should always be True due to some necessary calculations
;                for subsequent modelling, will change in an upcoming version) 
;   split_gauss: Should the terms be split into a pure sample variance, mix term and pure shot noise term?
;                If false it speeds up the calculation. Also, if both ssc and nonGaussian are true they are considered as a single
;                nonGaussian term. The SSC term will be shown as zero in the output.
;                If true, the output option "style" should contain list or terminal (see [output settings]) otherwise the split
;                will not be saved.
;   nongaussian: Should the non-Gaussian term be calculated, note that this slows down the computation.
;   ssc:         Should the super sample covariance be calculated? Requires a healpix file for the survey variance, 
;                otherwise a circular survey footprint will be assumed. Slows down the computation slightly.
;                Usually not required for galaxy clustering only.

[covariance terms]
gauss = True
split_gauss = True
nongauss = True
ssc = True


; Observables section:
; 
; Which observables are to be calculated. In general the code supports in its current version covariance between
; cosmic shear (matter-matter), galaxy-galaxy lensing (ggl, matter-galaxy) and galaxy clustering (clustering, galaxy-galaxy).
; For the different observables there are different estimators available.
;   cosmic_shear:        Should cosmic shear be considered in the covariance?
;                        Parameters: True or False
;   est_shear:           Which estimator should be used for cosmic shear?
;                        Parameters: C_ell (angular power spectra)
;                                    xi_pm (two compment angular correlation function)
;                                    cosebi (Complete Orthogonal Sets of E/B-Integrals, equivalent to psi stats for clustering and ggl)
;                                    bandpowers (angular averaged version of C_ells, has E and B modes)
;   ggl:                 Should galaxy-galaxy lensing be considered in the covariance?
;                        Parameters: True or False
;   est_ggl:             Which estimator should be used for galaxy-galaxy lensing?
;                        Parameters: C_ell (angular power spectra)
;                                    gamma_t (tangential shear correlation function)
;                                    cosebi (Complete Orthogonal Sets of E/B-Integrals, note that this is only optimal for cosmic shear)
;                                    bandpowers (angular averaged version of C_ells, only E modes)
;   clustering:          Should galaxy clustering be considered in the covariance?
;                        Parameters: True or False
;   est_clust:           Which estimator should be used for galaxy-clustering?
;                        Parameters: C_ell (angular power spectra)
;                                    w (angular correlation function)
;                                    cosebi (Complete Orthogonal Sets of E/B-Integrals, note that this is only optimal for cosmic shear)
;                                    bandpowers (angular averaged version of C_ells, only E modes)
;   cstellar_mf:         Should the conditional stellar mass function be included (for details see csmf section)?
;                        Parameters: True or False
;   cross_terms:         Should cross-terms between the observables be considered?
;                        Parameters: True or False (Should generally be true, unless you want to consider the 
;                                    observables to be uncorrelated artificially)
;   unbiased_clustering: Should the galaxy part be treated as completely unbiased without the use of the HOD?
;                        Paramters: True or False (default should be true, otherwise no HoD will be used)
; It should be noted that the estimators have to be consistent, i.e. you can only get C_ell/bandpowers or cosebi in all observables.
; For the realspace observable xi_pm, gamma_t and w belong together for cosmic shear, ggl and clustering respectively.
; If you want DIFFERENT summary statistics for the tracer please check the next Arbitrary summary section!
[observables]
cosmic_shear = True
est_shear = C_ell
ggl = True
est_ggl = C_ell
clustering = True
est_clust = C_ell
cstellar_mf = False
cross_terms = True
unbiased_clustering = False



[covTHETAspace settings]
theta_min = 0.5
theta_max = 300.0
theta_bins = 9
theta_type = log


theta_list = 1, 2, 3
xi_pp = True
xi_mm = True
theta_accuracy = 1e-3
integration_intervals = 400

; Output section:
; 
; Specifies output directories and output files.
;   directory:                Where should the output be stored (the directory must exist)
;                             Parameters: filepath as string
;   file:                     Filename for the final covariance matrix.
;                             Parameters: filename as string, might be two filenames (see style)
;   style:                    How should the final covariance be written?
;                             Parameters: 
;                               list:   A list with all covariance matrix entries for each probe and observable.
;                                       Is splitted in Gaussian (maybe splitted as well (see split_gauss), non-Gaussian and SSC)
;                               matrix: All contributions to the covariane matrix are summed up and stored in a final matrix form.
;                                       The indexing is as follows:
;                                                  (fastest)                                        (slowest)
;                                               spatial scale (e.g. ell for C_ell) ->  tomographic bins  -> summary statistic (e.g. COSEBIs) ->  tracer(e.g. clustering)   
;                                               If only one summary statistic per tracer and probe are called, tracer and summary statistic are essentially the same
;                                               If multiple tracers are called via the arbitrary summary statistics, they appear first. Special care has to be taken for
;                                               cosmic shear since always E and B modes appear. If two summary statistics are required the two E-modes will always appear first.
;                                        This order cannot be changed at the moment. If you have your own arrangement, use the list.
;                               terminal: The list is displayed in the terminal (brace yourself)!
;   list_style_spatial_first: Should the spatial index (ell, theta, order, ...) be the fastest index or the tomographic bin index in the output LIST
;                             Note, this does not affect how the matrix format is written.
;                             Note, observable blocks will always be the slowest.
;                             Parameters: boolean
;   corrmatrix_plot:          File name of the correlation coeffcient of the final covariance matrix.
;                             Parameters: File name as string
;   save_configs:             File name for the saving the config file. This contains all parameters used in the code.
;                             Parameters: File name as string
;   save_Cells:               Should the angular power spectra be saved, usually not necessary.
;                             Parameters: True or False
;   save_trispectra:          Should the trispectra in k-space be saved? Can be used for again by specifying 'trispec_file = ... ' later on.
;                             Parameters: True or False
;   save_alms:                Should the a_lms from the mask_file be saved? Can be specified later for read in and saves a bit of computation time.
;   use_tex:                  Should LaTeX be used for the plot of the correlation coefficient?
[output settings]
directory = ./output/
file = covariance_list_3x2pt_pure_Cell.dat, covariance_matrix_3x2pt_pure_Cell.mat
style = list, matrix
list_style_spatial_first = True
corrmatrix_plot = correlation_coefficient_3x2pt_pure_Cell.pdf
save_configs = save_configs.ini
save_Cells = True
save_trispectra = False
save_alms = True
use_tex = False



; covELLspace settings
;
; Settings for the covariance matrix in harmonic space (estimator 'C_ell'). Note that these settings are required for any projection to other observables.
; They will be adjusted to the required precission and values from other classes.
;   ell_min:                        Minimum multipole considered. A consistency check is carried out checking whether the minimum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_min.
;                                   Parameters: integer
;   ell_max:                        Maximum multipole considered. A consistency check is carried out checking whether the maximum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_max.
;                                   Parameters: integer
;   ell_bins:                       How many multipole bins should be considered over the specified range. (see also ell_type). 
;   ell_type:                       Should the ell-bins be spaced linearly or logarithmically. For logarithmic spacing they are always rounded to the next
;                                   unique integer.
;                                   Parameters: lin or log
;   ell_min_lensing:                Minimum multipole considered for lensing. A consistency check is carried out checking whether the minimum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_min.
;                                   Parameters: integer
;   ell_max_lensing:                Maximum multipole considered for lensing. A consistency check is carried out checking whether the maximum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_max.
;                                   Parameters: integer
;   ell_bins_lensing:               How many multipole bins should be considered over the specified range for lensing. (see also ell_type).
;                                   Parameters: integer
;   ell_type_lensing:               Should the ell-bins be spaced linearly or logarithmically. For logarithmic spacing they are always rounded to the next
;                                   unique integer.
;                                   Parameters: lin or log
;   ell_min_clustering:             Minimum multipole considered for clustering. A consistency check is carried out checking whether the minimum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_min.
;                                   Parameters: integer
;   ell_max_clustering:             Maximum multipole considered for clustering. A consistency check is carried out checking whether the maximum k in the halomodel
;                                   evaluation supports this multipole, if not it is set to the required log10k_max.
;                                   Parameters: integer
;   ell_bins_clustering:            How many multipole bins should be considered over the specified range for clustering. (see also ell_type).
;                                   Parameters: integer
;   ell_type_clustering:            Should the ell-bins be spaced linearly or logarithmically. For logarithmic spacing they are always rounded to the next
;                                   unique integer.
;                                   Parameters: lin or log
;   delta_z:                        Width of redshift steps used to create the interpolation splines for powerspectrum and response calculations. Usually below 0.1 is accurate enough,
;                                   unless rapid changes in the growth are expected. (Decrease will slow down the code slightly)
;                                   Parameters: float
;   tri_delta_z:                    Width of redshift steps used to create the interpolation splines for trispectrum calculations. Usually below something around 0.5 is accurate enough,
;                                   unless rapid changes in the growth are expected. (Decrease will slow down the code quite a bit)
;                                   Parameters: float
;   integration_steos:              Number of steps for the trapeziodal rule for the integration along the line-of-sight (in log-spaced co-moving distance). Increasing this will slow down the code
;                                   500 was accurate enough for all cases tested.
;                                   Parameters: integer             
;   nz_interpolation_polynom_order: Interpolation order for the read in redshift distribution. If the distribution is sampled enough in the input file
;                                   this should not make a big difference.
;                                   Parameters: integer
;   mult_shear_bias:                Multiplicative shear bias uncertainty (sigma_m) in each tomographic bin.
;                                   Parameters: floats separated by commas (the number of entries must match the number of tomographic bins considered via the 
;                                               redshift distribution files for lensing, see 'zlens_file'), otherwise it is ignored.
;   limber:                         Should the limber calcualtion be used for the angular power spectrum calculations?
;                                   Parameters: True or False
;   pixelised_cell:                 Should the angular statistics be convolved with a pixes window. This will reduce power on small scales.
;                                   Parameters: True or False
;   pixel_Nside:                    Nside (ofthe healpix map) of the above pixelization.
;                                   Parameters: Integer (typicall a power of 2)
;   n_spec:                         It is possible two define different ell-ranges for different probes (for example when considering spectroscopic and photometric galaxy clustering).
;                                   n_spec considers the first n_spec tomographic bins of the clustering probe as spectroscopic and associates them with ell_spec, while the remaining
;                                   are associated with ell_photo (see parameters below). If not specified or set to zero only the ell will be used as the multipole range. This is usually
;                                   needed for a 6x2pt analysis.
;                                   Parameters: integer
;   ell_spec/photo_min:             Minimum multipole considered for spectroscopic and photometric sample (see n_spec).
;                                   Parameters: integer
;   ell_spec/photo_max:             Maximum multipole considered for spectroscopic and photometric sample (see n_spec).
;                                   Parameters: integer
;   ell_spec/photo_bins:            How many multipole bins should be considered for spectroscopic and photometric sample (see n_spec).
;                                   Parameters: integer
;   ell_spec/photo_type:            Should the ell-bins for the spectroscopic and photometric sample (see n_spec) be spaced linearly or logarithmically. For logarithmic spacing they are always rounded to the next
;                                   unique integer.       
[covELLspace settings]
delta_z = 0.08
tri_delta_z = 0.5
integration_steps = 500
nz_interpolation_polynom_order = 1
mult_shear_bias = 0, 0, 0, 0, 0

ell_min = 2
ell_max = 5000
ell_bins = 100
ell_type = log

limber = True

ell_min_clustering =2
ell_max_clustering = 514
ell_bins_clustering = 64
ell_type_clustering = lin

ell_min_lensing = 30
ell_max_lensing = 500
ell_bins_lensing = 15
ell_type_lensing = log

; Survey specs section
; Sets the specifications for the survey such as survey mask, survey area, number density etc.
;   mask_directory:              Where to find the survey masks and eventually a_lm files (if saved, see save_alm parameter 
;                                in section output settings)
;                                Parameters: path to directory as string
;   mask_file_clust:             filename (within mask_directory) for the mask file of the galaxy clustering measurements.
;                                Parameters: filename (fits) as string
;   alm_file_clust:              filename (within mask_directory) for the sum over m of the a_lm modes derived from the associated maskfile above. 
;                                If specified, the mask file is not used
;                                Note that the code will NOT look for the maskfile if the alm file is not found but use a spherical mask instead.
;                                Parameters: filename (plain ascii) as string.
;   survey_area_clust_in_deg2:   Survey area for the galaxy clustering measurement. (First entry is spectroscopic, second entry is photometric).
;                                If not given it is inferred from the maskfile.
;                                If given, the maskfile value for the area is overwritten.
;                                Parameters: survey area as float (in square degrees)
;   n_eff_clust:                 Effective number density for the galaxy clustering measurement in each tomographic bin and mass bin
;                                Parameters: list of floats separated by commas for the number densities in (arc minutes)^(-2). The
;                                            length of the list should agree with the number of tomographic bins provided by the 
;                                            zclust_file in the redshift section. If multiple stellar mass bins are provided, this quantity is
;                                            calculated from the HoD directly.                       
;   mask_file_ggl:               filename (within mask_directory) for the mask file of the galaxy-galaxy lensing measurements.
;                                Parameters: filename (fits) as string
;   alm_file_ggl:                filename (within mask_directory) for the sum over m of the a_lm modes derived from the associated maskfile above.
;                                If specified, the mask file is not used
;                                Note that the code will NOT look for the maskfile if the alm file is not found but use a spherical mask instead.
;                                Parameters: filename (plain ascii) as string.
;   survey_area_ggl_in_deg2:     Survey area for the galaxy-galaxy lensing measurement. If not given it is inferred from the maskfile.
;                                If given, the maskfile value for the area is overwritten.
;                                Parameters: survey area as float (in square degrees)
;   mask_file_lensing:           filename (within mask_directory) for the mask file of the cosmic shear measurements.
;                                Parameters: filename (fits) as string
;   alm_file_lensing:            filename (within mask_directory) for the sum over m of the a_lm modes derived from the associated maskfile above.
;                                If specified, the mask file is not used. 
;                                Note that the code will NOT look for the maskfile if the alm file is not found but use a spherical mask instead.                       
;                                Parameters: filename (plain ascii) as string.
;   survey_area_lensing_in_deg2: Survey area for the cosmic shear measurement. If not given it is inferred from the maskfile.
;                                If given, the maskfile value for the area is overwritten.
;                                Parameters: survey area as float (in square degrees)
;   n_eff_lensing:               Effective number density for the cosmic shear measurement in each tomographic bin.
;                                Parameters: list of floats separated by commas for the number densities in (arc minutes)^(-2). The
;                                            length of the list should agree with the number of tomographic bins provided by the 
;                                            zlens_file in the redshift section.
;   ellipticity_dispersion:      Ellipticity dispersion of the single ellipticity component (the total dispersion is this times sqrt(2)) for each
;                                tomographic bin.
;                                Parameters: list of floats separated by commas for the ellipticity dispersion sigma_eps. The
;                                            length of the list should agree with the number of tomographic bins provided by the 
;                                            zlens_file in the redshift section.
; There is also the potential to specify other alm_files, but they are not needed for standard calculations
; 
[survey specs]
survey_area_clust_in_deg2 = 483.4
n_eff_clust = 0.16, 0.16
survey_area_ggl_in_deg2 = 483.4
survey_area_lensing_in_deg2 = 483.4
ellipticity_dispersion = 0.286084532469, 0.270211643434, 0.261576890227, 0.276513819228, 0.265404482999
n_eff_lensing = 1.207829761642, 0.605481425815, 1.163822540526, 1.764459694692, 1.249143662985


; Redshift section
;
; Specifies the redshift distribution for sources and lenses. They do not need to be normalized, the code takes care of this internally.
; Note that the amount of files or columns passed here sets the number of tomographic bins for lenses and clustering which will be used later in the code.
; Other settings, such as the effective number desnity, ellipticity dispersion and pair count files must match this number if the corresponding
; tracer is required in the covariance calculation.
;   z_directory:           Where to find the redshift distribution files. 
;                          Parameters: path to directory as string
;   zclust_directory:      Same as z_directory but for clustering only, if you prefer them separated. But should you really separate lenses and sources?
;   zlens_directory:       Same as z_directory but for lensing only, if you prefer them separated. But should you really separate lenses and sources?
;   zclust_file:           Filenames of the redshift distribution files of the lenses for N_lens bins
;                          Parameters: Either a single file with the style (files can be ascii or fits)
;                                        redshift   n_1(z) ... n_{N_lens}(z)
;                                           ...      ...           ...
;                                      Or N_lens files i separated by comma with the style
;                                        redshift   n_i(z)
;                                           ...      ...
;                                      Note that they all have to have the same number of z and n(z) values.
;   value_loc_in_clustbin: Where in each z_bin (this is the bin in the histogram of n(z), not the tomographic bin) should the value of n(z) be associated to?
;                          Parameters: Either mid, left or right
;   zclust_file:           Filenames of the redshift distribution files of the sources for N_source bins
;                          Parameters: Either a single file with the style (files can be ascii or fits)
;                                        redshift   n_1(z) ... n_{N_source}(z)
;                                           ...      ...           ...
;                                      Or N_source files i separated by comma with the style
;                                        redshift   n_i(z)
;                                           ...      ...
;                                      Note that they all have to have the same number of z and n(z) values.
;   value_loc_in_lensbin:  Where in each z_bin (this is the bin in the histogram of n(z), not the tomographic bin) should the value of n(z) be associated to?
;                          Parameters: Either mid, left or right
;   zlens_extension:       Extension for fits files
;                          Parameters: string of extension (e.g. NZ_SOURCE)
;   zcsmf_file:            Filenames of the redshift distribution files of the conditional stellar mass function (see csmf section)
;                          Parameters: Either a single file with the style (files can be ascii or fits)
;                                        redshift   n_1(z) ... n_{N_source}(z)
;                                           ...      ...           ...
;                                      Or N_source files i separated by comma with the style
;                                        redshift   n_i(z)
;                                           ...      ...
;                                      Note that they all have to have the same number of z and n(z) values.
[redshift]
z_directory = ./input/redshift_distribution
zclust_file = BOSS_and_2dFLenS_n_of_z1_res_0.01.asc, BOSS_and_2dFLenS_n_of_z2_res_0.01.asc
value_loc_in_clustbin = left
zlens_file = K1000_photoz_1.asc, K1000_photoz_2.asc, K1000_photoz_3.asc, K1000_photoz_4.asc, K1000_photoz_5.asc
value_loc_in_lensbin = left


; Cosmology section:
; Sets all relevant cosmological parameters. The background cosmology is calculated with astropy, while the halo massfunctiion
; is calcualted with hmf.
;   sigma8:   Standard deviation of the linear matter field filtered on a scale of 8 Mpc/h
;             Parameters: float
;   h:        Dimensionless Hubble constant, H0 = 100 h km/s/Mpc
;   omega_m:  Total matter density parameter today (this is the capital Omega, NOT omega = Omega h^2). The CDM parameter is inferred as
;             omega_m-omega_b
;             Parameters: float
;   omega_b:  Baryon matter density parameter today (this is the capital Omega, NOT omega = Omega h^2)
;             Parameters: float
;   omega_de: Dark energy matter density parameter today (this is the capital Omega, NOT omega = Omega h^2)
;             Parameters: float
;   w0:       Constant equation of state parameter for the Dark Energy component, beware of the phantom crossing w < -1
;             Parameters: float
;   wa:       Linear variation (with a) of the Dark Energy equation of state.
;             Parameters: float
;   ns:       Spectral index of the primordial power spectrum
;             Parameters: float
;   neff:     Effective number of relativistic degrees of freedom
;             Parameters: float
;   m_nu:     Sum of the neutrino masses (multiple masses will be included in future releases)
;             Parameters: float
;   tcmb0:    CMB temperature today.
;             Parameters: float
[cosmo]
sigma8 = 0.8
h = 0.7
omega_m = 0.3
omega_b = 0.05
omega_de = 0.7
w0 = -1.0
wa = 0.0
ns = 0.965
neff = 3.046
m_nu = 0.0


; Bias section
;
; Specifying the settings for the bias prescription. This complemented by the HOD section since we use a bias prescription
; dependent on halo mass and a fitting function for b(M,z) for DM halos which are then populated with galaxies.
;   model:           halo bias model b(M,z)
;                    Parameters: Tinker10 (at the moment this is the only one implemented, but feel free to implement your own in the
;                                bias class
;   mc_relation_cen: mass concentration relation for centrals
;                    Parameters: duffy08, uses the Duffy 2008 mean mass concentration relation.
;   mc_relation_sat: mass concentration relation for satellites
;                    Parameters: duffy08, uses the Duffy 2008 mean mass concentration relation.
;   log10mass_bins:  log10 of the stellar mass bins in M_sun/h
;                    Parameters: list of mass bin boundaries separated by commas, N bins require N+1 boundaries. If not passed no mass
;                                selection is assumed.
;   bias_files:      You can pass a redshift dependent but scale independent bias. This OVERWRITES the HoD prescription and uses the matter
;                    power spectrum times this bias factor squared.
;                    File paths of bias as a function of redshift. The number of biases must match the number of clustering bins
;                    Parameters: Either a single file with the style (files can be ascii or fits)
;                                    redshift   b_1(z) ... b_{N_lens}(z)
;                                       ...      ...           ...
;                                    Or N_lens files i separated by comma with the style
;                                        redshift   b_i(z)
;                                           ...      ...
;                                Note that they all have to have the same number of z and b(z) values.
[bias]
;bias_files = ./input/bias/zet_dependent_bias.ascii


; Intrinsic Alignment section
;
; We assume a very simple linear coupling between intrinsic ellipticity and the tidal field but inform it with the fully evolved tidal field.
; It just resembles the commonly used NLA model with redshift varying amplitude. Note that the contributions are carried into the SSC and trispectrum
; as well
;   A_IA:       Amplitude of the intrinsic alignment signal.
;               Parameters: float
;   eta_IA:     Slope of the redshift evolution of the alignment amplitude
;               Parameters: float
;   z_pivot_IA: Pivot scale in redshift for the redshift evolution.
;               Parameters: float
[IA]
A_IA = 0.264
eta_IA = 0.0
z_pivot_IA = 0.3


; Halo Occupation Distribution section setting the occupation numbers for centrals and satellites. This section goes hand in hand with the
; bias section which prescripes the halo bias as a function of halo mass which are in turn populated with galaxies by means of this section.
;   model_mor_cen:      Model for the central galaxies (as implemented in the HOD class, here modified Schechter)
;                       Parameters: double_powerlaw
;   model_mor_sat:      Model for the satellite galaxies (as implemented in the HOD class, here modified Schechter)
;                       Parameters: double_powerlaw
;   dpow_logm0_cen:     Pivot mass for the first power law of centrals 
;                       Parameters: float in log10 M_sun/h
;   dpow_a_cen:         Exponent of first power law of centrals
;                       Parameters: float
;   dpow_b_cen:         Exponent of the first power law of centrals
;                       Parameters: float
;   dpow_norm_cen:      Normalization of centrals
;                       Parameters: float
;   dpow_norm_sat:      Normalization of satellites
;                       Parameters: float
;   model_scatter_cen:  Transistion for central galaxies
;                       Parameters: lognormal
;   model_scatter_sat:  Transistion for satellite galaxies
;                       Parameters:modschechter (modified schechter function)
;   logn_sigma_c_cen:   Width of the transistion region for centrals
;                       Parameters: float (\sim log10M)
;   modsch_logmref_sat: Reference mass for satellites galaxies
;                       Parameters: float in log10 M_sun/h
;   modsch_alpha_s_sat: Powerlaw slope for satellites
;                       Parameters: float
[hod]
model_mor_cen = double_powerlaw
model_mor_sat = double_powerlaw
dpow_logm0_cen = 10.51
dpow_logm1_cen = 11.38
dpow_a_cen = 7.096
dpow_b_cen = 0.2
dpow_norm_cen = 1.0
dpow_norm_sat = 0.56
model_scatter_cen = lognormal
model_scatter_sat = modschechter
logn_sigma_c_cen = 0.35
modsch_logmref_sat = 13.0
modsch_alpha_s_sat = -0.858
modsch_b_sat = -0.024, 1.149

; Halo model section
; 
; All halo model ingredients such as the mass function are calculated with the HMF module. In this section we set the
; necessary parameters for the module. See also the documentation of HMF (https://hmf.readthedocs.io/en/latest/).
;   m_bins:                  Number of mass bins over which the halo mass function should be evaluated.
;                            Parameters: integer
;   log10m_min:              Minimum mass considered for halo model integrals. Note that this is the absolute minimum mass,
;                            but halo mass bins set earlier can chop these up.
;                            Parameters: float, log10(M_sun/h)
;   log10m_max:              Maximum mass considered for halo model integrals. Note that this is the absolute maximum mass,
;                            but halo mass bins set earlier can chop these up.
;                            Parameters: float, log10(M_sun/h)
;   hmf_model:               Which halo mass function should be used.
;                            Parameters: string
;   mdef_model:              What is the mass definition used.
;                            Parameters: string
;   mdef_params:             Parameters:of aforementioned mass definition.
;                            Parameters: string and floats separated by commas
;   disable_mass_conversion: If the built in mass definition does not agree with the provided one, should they be converted?
;                            Parameters: False or True
;   delta_c:                 Linearly evolved critical collapse density
;                            Parameters: float
;   small_k_damping_for1h:   Should the one halo term be damped at large scales (to avoid shot noise contribution there)
;                            Parameters: True or False
[halomodel evaluation]
m_bins = 900
log10m_min = 6
log10m_max = 18
hmf_model = Tinker10
mdef_model = SOMean
mdef_params = overdensity, 200
disable_mass_conversion = True
delta_c = 1.686
transfer_model = CAMB
small_k_damping_for1h = damped


; Powerspectrum Section
;
; Sets parameter for the evaulation of the power spectrum. These might be adjusted internally by the code if the required scales
; neccessitate a change to avoid extrapolation
;   non_linear_model:  Model for the nonlinear matter power spectrum
;                      Parameters: original, bird, peacock, takahashi, halomodel, mead2015, mead2016, mead2020, mead2020_feedback 
;   log10k_bins:       How many k-steps should be created for the spline at each redshift
;                      Parameters: integer
;   log10k_min:        log10 of the minimum k value (in h/Mpc)
;                      Parameters: float
;   log10k_max:        log10 of the maximum k value (in h/Mpc)
;                      Parameters: float
;   HMCode_A_baryon:   HMcode parameter A_baryon. Default 3.13. Used only in models mead2015 and mead2016 (see CAMB)
;                      Parameters: float
;   HMCode_eta_baryon: HMcode parameter eta_baryon. Default 0.603. Used only in mead2015 and mead2016 (see CAMB)
;                      Parameters: float
;   HMCode_logT_AGN:   HMcode parameter logT_AGN. Default 7.8. Used only in model mead2020_feedback.
;                      Parameters: float
[powspec evaluation]
non_linear_model = mead2020
HMCode_logT_AGN = 7.3
log10k_bins = 200
log10k_min = -3.49
log10k_max = 2.15

; Trispectrum Section
;
; Sets parameter for the evaulation of the trispectrum for the nongaussian covariance. This is where the trispectrum is actually calculated.
; Afterwards it is smeared on the values set in the powspec evaluation section.
;   log10k_bins:             How many k-steps should be created for the spline at each redshift
;                            Parameters: integer
;   log10k_min:              log10 of the minimum k value (in h/Mpc)
;                            Parameters: float
;   matter_klim:             Minimum k for k-integrals
;                            Parameters: float (in h/Mpc)
;   matter_mulim:            Minimum cos(angle) for angular integrals over paralellogram configurations.
;                            Parameters: float
;   log10k_max:              log10 of the maximum k value (in h/Mpc)
;                            Parameters: float
;   small_k_damping_for1h:   Should the one halo term be damped at large scales (to avoid shot noise contribution there)
;                            Parameters: True or False
;   lower_calc_limit:        If trispectrum drops below this value, ignore it
;                            Parameters: float

[trispec evaluation]
log10k_bins = 100
log10k_min = -3.49
log10k_max = 2.
matter_klim = 0.001
matter_mulim = 0.001
small_k_damping_for1h = damped
lower_calc_limit = 1e-200


; Tabulated input files section
;
; Collection of tabulated files. For the moment we only explain the necessary ones.
; important for accurate modelling. E.g. the pair count files. 
;   Cell_directory   : Where to look for 3D power spectrum input files
;                      Parameter: string to path
;   Cgg_file:          File for the galaxy galaxy angular power spectrum. The file must be organised such that for example:
;                               ell        tomo_i       tomo_j           Cgg_ij (ell, sample1, sample1)         Cgg_ij (ell, sample1, sample2)  ...    Cgg_ij (ell, sampleM, sampleM)
;                                2            1            1                   ...
;                                2            1            2                   ...
;                                               ...
;                                2            1            n                   ...
;                                2            2            1                   ...
;                                               ...
;                                3            1            1                   ...
;                                               ...
;                      tomo_i and tomo_j can run from 0 to n-1 or 1 to n. M mass sample bins, these should agree with the number of bins chosen for the bias section
;                      Parameter: filename as string. 
;                           MUST contain 'gg'
;   Cgm_file:          File for the galaxy matter angular power spectrum (GGL). The file should be organised as follows
;                               ell        tomo_i       tomo_j           Cgm_ij (ell, sample1)   ...         Cgm_ij (ell, sampleM) 
;                                2            1            1                   ...
;                                2            1            2                   ...
;                                               ...
;                                2            1            n                   ...
;                                2            2            1                   ...
;                                               ...
;                                3            1            1                   ...
;                      tomo_i and tomo_j can run from 0 to n-1 or 1 to n. M mass sample bins, these should agree with the number of bins chosen for the bias section
;                      Parameter: filename as string.
;                           MUST contain 'gm' or 'gkappa'
;   Cmm_file:          File for the galaxy matter angular power spectrum (GGL). The file should be organised as follows
;                               ell        tomo_i       tomo_j           Cmm_ij (ell)  
;                                2            1            1                   ...
;                                2            1            2                   ...
;                                               ...
;                                2            1            n                   ...
;                                2            2            1                   ...
;                                               ...
;                                3            1            1                   ...
;                      tomo_i and tomo_j can run from 0 to n-1 or 1 to n.
;                      Parameter: filename as string. 
;                          MUST contain 'mm' or 'kappakappa'     

[tabulated inputs files]
Cell_directory = ./input/Cell
;Cgg_file = Cell_gg.ascii
;Cgm_file = Cell_gkappa.ascii
;Cmm_file = Cell_kappakappa.ascii

; Defines the number of cores/threads used
[misc]
num_cores = 4